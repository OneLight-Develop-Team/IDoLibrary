<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <shelfSet name="shelf_set_1" label="Create and Refine">
    <memberToolshelf name="create"/>
    <memberToolshelf name="modify"/>
    <memberToolshelf name="model"/>
    <memberToolshelf name="polygon"/>
    <memberToolshelf name="deform"/>
    <memberToolshelf name="texture"/>
    <memberToolshelf name="rigging"/>
    <memberToolshelf name="muscles"/>
    <memberToolshelf name="characters"/>
    <memberToolshelf name="constraints"/>
    <memberToolshelf name="groomtools"/>
    <memberToolshelf name="guidemodify"/>
    <memberToolshelf name="grooming"/>
    <memberToolshelf name="terrainfx"/>
    <memberToolshelf name="cloud"/>
    <memberToolshelf name="volume"/>
    <memberToolshelf name="qLib"/>
    <memberToolshelf name="qLib-dev"/>
    <memberToolshelf name="shelf_1"/>
  </shelfSet>

  <toolshelf name="constraints" label="Constraints">
    <memberTool name="object_constraintparentblend"/>
    <memberTool name="object_constraintblend"/>
    <memberTool name="object_constraintlookat"/>
    <memberTool name="object_constraintpath"/>
    <memberTool name="object_constraintpoints"/>
    <memberTool name="object_constraintsurface"/>
    <memberTool name="object_constrainttransform"/>
    <memberTool name="object_blendpose"/>
    <memberTool name="object_lagobject"/>
    <memberTool name="object_jiggleobject"/>
    <memberTool name="object_constraintgamepad"/>
    <memberTool name="sop_constraintnetwork"/>
    <memberTool name="object_constrainttoggle"/>
    <memberTool name="object_constraintbake"/>
    <memberTool name="object_constraintdelete"/>
  </toolshelf>

  <toolshelf name="rigging" label="Rigging">
    <memberTool name="object_bones"/>
    <memberTool name="object_bonesfromcurve"/>
    <memberTool name="object_pose"/>
    <memberTool name="rigging_ikfromobjects"/>
    <memberTool name="rigging_ikfrombones"/>
    <memberTool name="object_capturegeometry"/>
    <memberTool name="object_editcaptureregion"/>
    <memberTool name="object_editcaptureweight"/>
    <memberTool name="object_editcaptureblend"/>
    <memberTool name="object_mirrorcapture"/>
    <memberTool name="object_paintcapturelayer"/>
    <memberTool name="object_aligncapturepose"/>
    <memberTool name="sop_deltamush"/>
    <memberTool name="sop_comb"/>
  </toolshelf>

  <toolshelf name="volume" label="Volume">
    <memberTool name="geometry_fogvolume"/>
    <memberTool name="geometry_vdbfrompolygons"/>
    <memberTool name="geometry_vdbfromparticles"/>
    <memberTool name="geometry_paintcolorvolume"/>
    <memberTool name="geometry_paintfogvolume"/>
    <memberTool name="geometry_paintsdfvolume"/>
    <memberTool name="geometry_volumerasterizepoints"/>
    <memberTool name="geometry_volumerasterizeparticles"/>
    <memberTool name="geometry_volumerasterizecurve"/>
    <memberTool name="geometry_convertvdb"/>
  </toolshelf>

  <toolshelf name="texture" label="Texture">
    <memberTool name="sop_uvproject"/>
    <memberTool name="sop_uvedit"/>
    <memberTool name="sop_uvbrush"/>
    <memberTool name="sop_uvfuse"/>
    <memberTool name="sop_uvflatten"/>
    <memberTool name="sop_uvpelt::2.0"/>
    <memberTool name="sop_texture"/>
    <memberTool name="sop_uvtransform"/>
    <memberTool name="sop_uvunwrap"/>
    <memberTool name="sop_uvquickshade"/>
    <memberTool name="generic_cleartexcache"/>
    <memberTool name="sop_uvsmooth"/>
  </toolshelf>

  <toolshelf name="terrainfx" label="Terrain FX">
    <memberTool name="terrain_hills"/>
    <memberTool name="terrain_mountain"/>
    <memberTool name="terrain_valley"/>
    <memberTool name="terrain_moonscape"/>
    <memberTool name="terrain_islands"/>
    <memberTool name="terrain_canyon"/>
    <memberTool name="terrain_dunes"/>
  </toolshelf>

  <toolshelf name="cloud" label="Cloud FX">
    <memberTool name="cloud_create"/>
    <memberTool name="sop_cloud"/>
    <memberTool name="sop_cloudnoise"/>
    <memberTool name="cloud_light"/>
    <memberTool name="sky_rig"/>
  </toolshelf>

  <toolshelf name="deform" label="Deform">
    <memberTool name="sop_twist"/>
    <memberTool name="sop_bend"/>
    <memberTool name="geometry_lineartaper"/>
    <memberTool name="geometry_squashstretch"/>
    <memberTool name="sop_bulge"/>
    <memberTool name="sop_lattice"/>
    <memberTool name="sop_fractal"/>
    <memberTool name="sop_mountain::2.0"/>
    <memberTool name="geometry_waves"/>
    <memberTool name="sop_ripple::2.0"/>
    <memberTool name="object_morph"/>
  </toolshelf>

  <toolshelf name="polygon" label="Polygon">
    <memberTool name="sop_polyextrude::2.0"/>
    <memberTool name="sop_polybevel::2.0"/>
    <memberTool name="sop_polybridge"/>
    <memberTool name="sop_polysplit::2.0"/>
    <memberTool name="sop_edgeloop"/>
    <memberTool name="sop_polyreduce::2.0"/>
    <memberTool name="sop_polyfill"/>
    <memberTool name="sop_polyexpand2d"/>
    <memberTool name="sop_edgecollapse"/>
    <memberTool name="sop_edgecusp"/>
    <memberTool name="sop_edgeflip"/>
    <memberTool name="sop_edgedivide"/>
    <memberTool name="sop_dissolve::2.0"/>
    <memberTool name="sop_knife"/>
    <memberTool name="sop_clip"/>
    <memberTool name="sop_subdivide"/>
    <memberTool name="sop_facet"/>
    <memberTool name="sop_fuse"/>
    <memberTool name="sop_smooth::2.0"/>
  </toolshelf>

  <toolshelf name="model" label="Model">
    <memberTool name="sop_revolve"/>
    <memberTool name="geometry_loft"/>
    <memberTool name="sop_skin"/>
    <memberTool name="sop_rails"/>
    <memberTool name="sop_sweep"/>
    <memberTool name="sop_creep"/>
    <memberTool name="sop_ray"/>
    <memberTool name="sop_boolean::2.0"/>
    <memberTool name="sop_break"/>
    <memberTool name="geometry_voronoifracture"/>
    <memberTool name="sop_topobuild"/>
    <memberTool name="sop_carve"/>
    <memberTool name="sop_convert"/>
    <memberTool name="sop_refine"/>
    <memberTool name="sop_reverse"/>
    <memberTool name="sop_sculpt"/>
    <memberTool name="sop_scatter::2.0"/>
    <memberTool name="sop_clusterpoints"/>
    <memberTool name="geo_group"/>
    <memberTool name="sop_edit"/>
    <memberTool name="sop_visibility"/>
  </toolshelf>

  <toolshelf name="modify" label="Modify">
    <memberTool name="object_combine"/>
    <memberTool name="geometry_extract"/>
    <memberTool name="geometry_mirror"/>
    <memberTool name="geometry_copy"/>
    <memberTool name="geometry_duplicate"/>
    <memberTool name="object_centerpivot"/>
    <memberTool name="object_movetopivot"/>
    <memberTool name="object_freeze"/>
    <memberTool name="object_bakeanimation"/>
    <memberTool name="generic_delete"/>
    <memberTool name="generic_hide"/>
    <memberTool name="object_parent"/>
  </toolshelf>

  <toolshelf name="create" label="Create">
    <memberTool name="geometry_box"/>
    <memberTool name="geometry_sphere"/>
    <memberTool name="geometry_tube"/>
    <memberTool name="geometry_torus"/>
    <memberTool name="geometry_grid"/>
    <memberTool name="object_null"/>
    <memberTool name="geometry_line"/>
    <memberTool name="geometry_circle"/>
    <memberTool name="sop_curve"/>
    <memberTool name="geometry_drawcurve"/>
    <memberTool name="object_path"/>
    <memberTool name="geometry_spraypaint"/>
    <memberTool name="sop_font"/>
    <memberTool name="geometry_platonic"/>
    <memberTool name="sop_lsystem"/>
    <memberTool name="sop_metaball"/>
    <memberTool name="geometry_file"/>
  </toolshelf>

  <toolshelf name="qLib" label="qLib">
    <memberTool name="AccessShotNode_qL"/>
    <memberTool name="ToggleViewportBackgroundColor_qL"/>
    <memberTool name="ToggleViewBackground_qL"/>
    <memberTool name="RealTimePlayback_qL"/>
    <memberTool name="ToggleIntegerFrames_qL"/>
    <memberTool name="ReferenceCopy_qL"/>
    <memberTool name="AttribDisplayMarkers_qL"/>
    <memberTool name="ToggleViewportTemplates_qL"/>
    <memberTool name="ToggleViewportGuides_qL"/>
    <memberTool name="CrashRecovery_qL"/>
  </toolshelf>

  <toolshelf name="qLib-dev" label="qLib-dev">
    <memberTool name="DigitalAsset_PostProcess_qL"/>
  </toolshelf>

  <toolshelf name="shelf_1" label="pcs shelf">
    <memberTool name="tool_1"/>
    <memberTool name="tool_2"/>
    <memberTool name="tool_3"/>
    <memberTool name="copy"/>
    <memberTool name="cam_track"/>
    <memberTool name="vc"/>
    <memberTool name="validate_cache"/>
    <memberTool name="H17_cam"/>
    <memberTool name="iso_selected"/>
    <memberTool name="maya_light"/>
    <memberTool name="rbd_constraint"/>
  </toolshelf>

  <toolshelf name="groomtools" label="Hair Utils">
    <memberTool name="object_groom_addfur"/>
    <memberTool name="object_groom_guidegroom"/>
    <memberTool name="object_groom_groommerge"/>
    <memberTool name="object_groom_animateguides"/>
    <memberTool name="object_groom_simguides"/>
    <memberTool name="object_groom_hairgen"/>
    <memberTool name="object_groom_isolateparts"/>
    <memberTool name="object_groom_togglehairdisplay"/>
  </toolshelf>

  <toolshelf name="characters" label="Characters">
    <memberTool name="object_simplebiped"/>
    <memberTool name="object_simplefemale"/>
    <memberTool name="object_simplemale"/>
    <memberTool name="object_mocapbiped1"/>
    <memberTool name="object_mocapbiped2"/>
    <memberTool name="object_mocapbiped3"/>
    <memberTool name="object_mocapbiped3"/>
    <memberTool name="object_mcacclaim"/>
  </toolshelf>

  <toolshelf name="guidemodify" label="Guide Process">
    <memberTool name="sop_groom_guideinit"/>
    <memberTool name="sop_groom_curveadvect"/>
    <memberTool name="sop_groom_reguide"/>
    <memberTool name="sop_groom_guideprocess_setdir"/>
    <memberTool name="sop_groom_guideprocess_length"/>
    <memberTool name="sop_groom_guideprocess_lift"/>
    <memberTool name="sop_groom_guideprocess_straighten"/>
    <memberTool name="sop_groom_guideprocess_smooth"/>
    <memberTool name="sop_groom_guideprocess_frizz"/>
    <memberTool name="sop_groom_guideprocess_bend"/>
    <memberTool name="sop_groom_hairclump"/>
    <memberTool name="sop_groom_drawpartingline"/>
    <memberTool name="sop_groom_whitehair"/>
  </toolshelf>

  <toolshelf name="muscles" label="Muscles">
    <memberTool name="object_riggedmuscle"/>
    <memberTool name="object_strokemuscle"/>
    <memberTool name="object_musclerig"/>
    <memberTool name="object_musclepin"/>
    <memberTool name="object_frankenmuscle"/>
    <memberTool name="geometry_mirror"/>
    <memberTool name="object_attachmuscles"/>
    <memberTool name="object_detachmuscles"/>
    <memberTool name="object_setmuscleid"/>
    <memberTool name="object_muscledisplace"/>
    <memberTool name="object_paintmusclemask"/>
    <memberTool name="object_mirrormusclecapture"/>
    <memberTool name="object_tissuesimulate"/>
  </toolshelf>

  <toolshelf name="grooming" label="Guide Brushes">
    <memberTool name="object_drawhairguides"/>
    <memberTool name="object_plantguides"/>
    <memberTool name="object_groomhairinscreen"/>
    <memberTool name="object_groomhairalongsurface"/>
    <memberTool name="object_groomliftbrush"/>
    <memberTool name="object_groomclumpbrush"/>
    <memberTool name="object_groompartbrush"/>
    <memberTool name="object_groomadjustlength"/>
    <memberTool name="object_groomsmooth"/>
    <memberTool name="object_groomcuthair"/>
    <memberTool name="object_groomextendhair"/>
    <memberTool name="object_groom_recachestrokes"/>
  </toolshelf>

  <tool name="ToggleViewBackground_qL" label="/bg image/" icon="COP2_env">
    <helpText><![CDATA[#icon: COP2/env
#context: obj
#type: tool

= Toggle Viewport Background qL =

*version 1*

"""Toggles background image display in all viewports.
----
LMB: Toggle display
Shift-LMB: ...
"""

@usage Usage

((LMB)):
    Toggles background image display (Display Options -> Background -> Display background image)
((Shift + LMB)):
    Enable background images
((Ctrl + LMB)):
    Disable background images


@related
    - ...

]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

if not hasattr(hou.session, "viewbg"):
    hou.session.viewbg = True

hou.session.viewbg = not hou.session.viewbg

if ctrl: hou.session.viewbg = False
if shift: hou.session.viewbg = True

t = 'on' if hou.session.viewbg else 'off'
hou.hscript("viewbackground -b %s *" % (t, ))
hou.ui.setStatusMessage("Viewport background images are now %s" % ("DISPLAYED" if hou.session.viewbg else "OFF") )
]]></script>
  </tool>

  <tool name="CrashRecovery_qL" label="::recover::" icon="MISC_satchel">
    <script scriptType="python"><![CDATA[import qlibutils

qlibutils.do_crash_recovery()

]]></script>
  </tool>

  <tool name="AccessShotNode_qL" label="::shot::" icon="NETWORKS_scene">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Access: Shot Node qL =

*version 1*

"""Opens a floating parameter panel for scene Shot qL node(s).
---
LMB: All Shot and Environment nodes
Shift-LMB: Only "active" Shot(s) (visible/selectable)
Alt-LMB: Environment nodes only
"""

@bugs Limitations

- ...


@relnotes Release Notes

_version 1_ ---

2014-10-12:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils


def show_parms(ops, title="Parameters", kwargs=None):
    """."""
    PT = hou.paneTabType.Parm
    P = None
    t = None

    for op in ops:
        if P is None:
            P = hou.ui.curDesktop().createFloatingPanel(PT)
            P.setName(title)
            t = P.panes()[0].tabs()[0]
        else:
            t = P.panes()[0].createTab(PT)

        if t:
            t.setPin(True)
            t.setCurrentNode(op)

    return P



ctrl = kwargs['ctrlclick']
shift = kwargs['shiftclick']
alt = kwargs['altclick']

is_shot = lambda n: 'qLib::shot_ql' in n.type().name()
is_env = lambda n: 'qLib::environment_ql' in n.type().name()

# find all Shot qL OPs first
#
shots = [ c for c in hou.node('/').allSubChildren()
    if is_shot(c) or is_env(c) ]

if shift or ctrl:
    shots = [ n for n in shots if n.isSelectableInViewport() or n.isDisplayFlagSet() ]

if alt:
    shots = [ n for n in shots if is_env(n) ]

shots = sorted(shots,
    key=lambda n: '%s %d %d %s' % (n.type().name(),
        n.isSelectableInViewport(),
        n.isDisplayFlagSet(),
        n.name(), )
    )

show_parms(shots, title="Scene Global(s)", kwargs=kwargs)

]]></script>
  </tool>

  <tool name="ToggleViewportTemplates_qL" label="/templates/" icon="NODEFLAGS_template">
    <helpText><![CDATA[#icon: NODEFLAGS/template
#context: obj
#type: tool

= Toggle Viewport Templates qL =

*version 1*

"""Toggles template geometry display in viewports.
----
LMB: Toggle template display
Shift-LMB: Clear display template flag on all (S)OPs
"""

@usage Usage

((LMB)):
    Toggles template display (Display Options -> Guides -> Templated geometry, Selectable templates)
((Shift + LMB)):
    Enable template display
((Ctrl + LMB)):
    Clears template flag on all (S)OPs within the currently displayed container


@related
    - ...

]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']


if ctrl:
    n = toolutils.sceneViewer()
    n = n.pwd() # container node

    for c in n.children():
        try:
            c.setTemplateFlag(0)
            c.setSelectableTemplateFlag(0)
        except:
            pass

    hou.ui.setStatusMessage("Cleared all display template flags")
else:

    if not hasattr(hou.session, "templates"):
        hou.session.templates = True

    hou.session.templates = not hou.session.templates

    if shift: hou.session.templates = True

    t = 'on' if hou.session.templates else 'off'
    hou.hscript("viewdisplay -T %s -i %s *" % (t, t, ))
    hou.ui.setStatusMessage("Templates are now %s" % ("DISPLAYED" if hou.session.templates else "OFF") )
]]></script>
  </tool>

  <tool name="ToggleViewportGuides_qL" label="/guides/" icon="NODEFLAGS_origin">
    <helpText><![CDATA[#icon: IMAGE/view_guides
#context: obj
#type: tool

= Toggle Viewport Guides qL =

*version 1*

"""Toggles OP guide display in the viewports."""

@bugs Limitations

- It might behave inconsistently between viewports (and needs to be clicked twice)


@relnotes Release Notes

_version 1_ ---

2014-03-20:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

v = toolutils.sceneViewer()
w = "%s.%s.world" % \
        (v.pane().desktop().name(), \
        v.name() )
#print "view:", w

if not hasattr(hou.session, "guides"):
    hou.session.guides = True

hou.session.guides = not hou.session.guides
#hou.hscript("viewdisplay -g %s %s" % ("on" if hou.session.guides else "off", w, ))
hou.hscript("viewdisplay -g %s *" % ("on" if hou.session.guides else "off", ))
hou.ui.setStatusMessage("Geometry guides are now %s" % ("DISPLAYED" if hou.session.guides else "OFF") )]]></script>
  </tool>

  <tool name="RealTimePlayback_qL" label="realtime" icon="PLAYBAR_realtime">
    <helpText><![CDATA[#icon: PLAYBAR/realtime
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar.
----
LMB: Enable real-time playback
Shift-LMB: Disable real-time playback
"""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

hou.playbar.setRealTime( not kwargs['shiftclick'] )]]></script>
  </tool>

  <tool name="ToggleViewportBackgroundColor_qL" label="/backgnd/" icon="COP2_invert">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Cycle Viewport Background Color qL =

*version 1*

"""Cycles between viewport color schemes (dark, grey, light).
----
LMB: Cycle background color
Ctrl-LMB: Reset to black
Shift-LMB: Reset to grey
"""

@bugs Limitations

- It might not seem to work for the first time (try clicking again, then)


@relnotes Release Notes

_version 1_ ---

2015-02-24:
    - Added dark/grey/light cycle (H14)

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

bg = None

try:
    # cycle next bg
    if kwargs['ctrlclick']: raise
    bgs = hou.session.bg[:]
    bgs = bgs[1:]+bgs[:1]
    if kwargs['shiftclick']: bgs = ['bw', 'light', 'wb']
    bg = bgs[0]
    hou.session.bg = bgs
except:
    # set up default bg vars
    hou.session.bg = ['wb', 'bw', 'light']
    bg = hou.session.bg[0]

bgs = { 'wb':'dark', 'bw':'grey', 'light':'light' }

hou.hscript("viewdisplay -B %s *" % bg)
hou.ui.setStatusMessage("Cycled background to %s" % bgs[bg].upper() )]]></script>
  </tool>

  <tool name="ToggleIntegerFrames_qL" label="int.frames" icon="PLAYBAR_editable_keys">
    <helpText><![CDATA[#icon: PLAYBAR/editable_keys
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar."""
]]></helpText>
    <script scriptType="python"><![CDATA[import hou

m = not hou.playbar.usesIntegerFrames()
hou.playbar.setUseIntegerFrames(m)

hou.ui.setStatusMessage(" ---- Using Integer Frames: %s" % ("ON" if m else "OFF"))
]]></script>
  </tool>

  <tool name="AttribDisplayMarkers_qL" label="attr.vis" icon="BUTTONS_displayoptions">
    <helpText><![CDATA[#icon: BUTTONS/displayoptions
#context: obj
#type: tool

= Attrib Display Markers qL =

*version 1*

"""Creates display markers for all the attributes present on the displayed operator.
----
Shift-LMB: Clear previously built
Ctrl-LMB: Clear ALL markers then rebuild
Ctrl+Shift-LMB: Clear ALL markers
"""

This function builds visual display markers for all the attributes
that exist on the currently displayed operator.

(It can be considered as a shortcut to the similar function of the
[Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]'s
_Marker_ section.)

@usage Usage

((LMB)):
    Builds attribute markers for the current Display SOP.
    (Existing markers will also be rebuilt.)
((Shift + LMB)):
    Clears previously built attribute markers.
    (Markers not built with this function will be preserved.)
((Ctrl + LMB)):
    Clears _all_ markers (made by this tool or otherwise)
    and rebuilds the attribute marker list.
((Ctrl + Shift + LMB)) . :
    Deletes _all_ display markers. _All of them._


@related
    - [Attr Visualize qL SOP|node:sop/qLib::attr_visualize_ql::1]
    - ...

@usage Using Add Display Markers

Set the Display flag on a node and click the shelf button. Then press
the `D` key in a Scene View, go to the Markers tab to see the generated
attribute markers ("Custom" section.)



]]></helpText>
    <script scriptType="python"><![CDATA[import hou
import toolutils


def ynreq(msg):
    return hou.ui.displayMessage(msg, ["Ok", "Cancel"]) == 0

def dispmsg(msg):
    hou.ui.setStatusMessage(msg)



def get_current_viewer_name():
    v = toolutils.sceneViewer()
    w = "%s.%s.world" % \
            (v.pane().desktop().name(), \
            v.name() )
    return w



def get_display_sop():
    v = None
    try:
        v = toolutils.sceneViewer()
        v = v.pwd() # OBJ object
        v = v.displayNode()
    except:
        v = None
        dispmsg("couldn't get Display (S)OP")
    return v



def clear_built_markers(kwargs=None, clearAll=False):
    if True: #ynreq("Clear %s display markers?" % "ALL" if clearAll else "generated"):
        for m in hou.hscript("viewoptls")[0].split():
            if clearAll or '_vis_' in m:
                print "viewoptrm %s" % m
                hou.hscript("viewoptrm %s" % m)





def build_markers(kwargs=None): # ( was create_markers() )
    """."""

    type_names = {
        hou.attribType.Point: "point",
        hou.attribType.Prim: "prim",
        hou.attribType.Vertex: "vertex"
    }

    type_labels = {
        hou.attribType.Point: "p:",
        hou.attribType.Prim: "pr:",
        hou.attribType.Vertex: "vt:"
    }

    pwd = get_display_sop()
    if pwd: dispmsg("display OP: %s" % pwd.path())
    else: return

    type_name  = lambda t: type_names[t]  if t in type_names  else ""
    type_label = lambda t: type_labels[t] if t in type_labels else ""
    p  = lambda n: pwd.parm(n).eval()
    ps = lambda n: pwd.parm(n).eval().strip()

    views = hou.hscript("viewls -n")[0].split()
    g = pwd.geometry()

    def to_as(attrs):
        return " ".join( [ a.name() for a in attrs if a.dataType() is not hou.attribData.String ] )

    #force_tx  = ps('force_text').split()
    #vel_attrs = ps('vel_attribs').split()

    force_tx = 'P Cd uv'.split()
    vel_attrs = 'v accel'.split()

    scale_v   = 1.0 # vec scale
    scale_vel = (1/24.0) # velocity scale

    attrs_pt = to_as(g.pointAttribs())
    attrs_pr = to_as(g.primAttribs())
    attrs_vtx = to_as(g.vertexAttribs())

    #attrs_display = ps('markers_display').split()
    #if p('do_markers_display')==0: attrs_display = []

    CS = [
            (attrs_pt, g.findPointAttrib),
            (attrs_pr, g.findPrimAttrib),
            (attrs_vtx, g.findVertexAttrib)
        ]

    hue = 120.0
    color = hou.Color()

    for C in CS:

        attrs = C[0].split()
        find_attr_func = C[1] #g.findPointAttrib

        # add textual version of vector attrs
        attrs += [ ("text:%s" % v) for v in attrs if find_attr_func(v).size()==3 ]
        attrs = sorted(attrs)

        for name in attrs:

            tx = "text:" in name
            name = name.replace("text:", "")

            a = find_attr_func(name)
            if a and a.dataType() is not hou.attribData.String:
                opt_name = "_vis_%s_%d" % (name, tx, )
                size = a.size()
                is_xn = a.isTransformedAsNormal()
                is_xv = a.isTransformedAsVector()
                is_vect = size==3 and not tx # and name not in force_tx
                as_vel = name in vel_attrs
                scale = scale_vel if as_vel else scale_v
    
                label = "%s%s" % ( type_label(a.type()), name )
    
                if is_vect:
                    label += " [vec."
                    if as_vel: label += "/v."
                    if is_xn: label += "; xformed as normal"
                    if is_xv: label += "; xformed as vector"
                    label += "]"
                else:
                    pass # label += " (num)"
    
                print "--- %s: '%s'" % (name, label)
    
                # create/update marker
    
                hou.hscript('viewoptrm %s' % opt_name)
                hou.hscript('viewoptadd %s %s' % ('vector' if is_vect else 'text', opt_name))
    
                def vos(parm, val):
                    print ' --- viewoptset %s %s ( %s )' % (opt_name, parm, val)
                    hou.hscript('viewoptset %s %s ( %s )' % (opt_name, parm, val))

                if True:    
                    vos('attrib', a.name())
                    vos('class', type_name(a.type()))
                    vos('label', '"%s"' % label)
                    vos('overridecolor', '1')

                    val = 0.85 if is_vect else 0.15

                    color.setHSV((hue, 0.9, val)); vos('color', '%f %f %f' % color.rgb())
                    color.setHSV((hue, 0.4, val+0.1)); vos('selcolor', '%f %f %f' % color.rgb())
                    hue += 137.5 * 0.5

                if is_vect:
                    vos('scale', scale)

                if False: # name in attrs_display:
                    for view in views:
                        hou.hscript('viewoptenable %s all +%s' % (view, opt_name))
                    hue += 137.5/2.0

            else:
                print "couldn't find attribute %s" % name

    print "done. ------------"

'''
viewoptset
    vector_dunno
        arrow ( 0 )
        attrib ( N )
        class ( point )
        color ( 0 0 1 )
        icon ( SI_pointNormal )
        label ( "pr: primN (vector)" )
        overridecolor ( 0 )
        scale ( 1 )
        selcolor ( 0 0.45 1 )
        visibility ( 1 )
'''


print kwargs

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

clear_built_markers(kwargs, clearAll=ctrl)

if not shift:
    build_markers(kwargs)
]]></script>
  </tool>

  <tool name="ReferenceCopy_qL" label="Ref Copy qL" icon="BUTTONS_copy">
    <helpText><![CDATA[#icon: BUTTONS/copy
#context: obj
#type: tool

= Reference Copy qL =

*version 1*

"""Creates a Reference Copy where the reference source is easy to replace.
---
Alt-LMB: Use relative path for source operator.
"""

This function is the same as the original _Reference Copy_ operation,
but it adds an extra parameter that specifies the source operator name
where all parameter values are referenced from.

This way the reference source is easy to change.


@usage Using Reference Copy

Select node(s) and click the shelf button.

@relnotes Release Notes

_version 1_ ---

2015-01-16:
    - Added workaround for "assets with editable subnets can't be reference copied" issue
      (works with qLib nodes only)

2014-04-05:
    - Added Alt+LMB mode (creates relative path for reference source)

2014-02-14:
    - Fixed serious bug (worked properly only on frame 1)
    - Uses `chsop()` now to get OP paths

2013-03-10:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[# do the dunno
#
import hou
import re

def postproc_refcopy(nodepath, srcpath):
    N = hou.node(nodepath)

    if N:

        # add ref_source parameter
        #
        N.addSpareParmTuple(
            hou.StringParmTemplate(
                "ref_source", "Ref Source", 1,
                string_type=hou.stringParmType.NodeReference
            )
        )

        N.parm('ref_source').set(srcpath)

        # process linkage expressions
        #
        parms = N.parms()
        for p in parms:
            try:
                if True:
                    for k in p.keyframes():
                        x = k.expression()
                        x = re.sub('"\.\./[^/]+', 'chsop("ref_source")+"', x)
                        k.setExpression(x, hou.exprLanguage.Hscript)
                        p.setKeyframe(k)

            except Exception as e:
                print "failed for param '%s'" % p.name()

        # store typename of the creator tool
        #
        hou.hscript("opuserdata -n '___toolcount___' -v '%s' %s" % ('1', nodepath, ))
        hou.hscript("opuserdata -n '___toolid___' -v '%s' %s" % ('ReferenceCopy_qL', nodepath, ))


def fixum(node, mode):
    '''Workaround for the "assets with editable subnets cannot be reference copied" issue.'''
    try:
        n = hou.node(node)
        t = n.type()
        d = t.definition()

        tn = t.name()
        # hackish workaround: apply to all qLib nodes
        #
        if 'qLib::' in tn and '_ql' in tn:
            #print "(applying %s to %s)" % (mode, n.path(), )

            if mode=='open':
                n.allowEditingOfContents()
                pass

            if mode=='close':
                n.matchCurrentDefinition()
                pass
        else:
            #print "(skipping %s)" % (n.path(), )
            pass
    except:
        print "oops #1"
        pass

# main
#
sel = [ n.path() for n in hou.selectedNodes() ]

alt = kwargs['shiftclick'] or kwargs['altclick'] or kwargs['ctrlclick']

for S in sel:
    c = len( hou.hscript( 'opls -d %s*' % S )[0].split() )
    T = '%s_copy%d' % (S, c)

    try:
        fixum(S, 'open') # "Allow Editing of Contents" for S
        hou.hscript('opcp -c %s %s' % (S, T))
        fixum(S, 'close') # "Match Current Definition" for S and T
        fixum(T, 'close')
    except:
        print "oops #2, %s" % S
        pass

    if True:
        srcpath = S
        if alt:
            srcpath = hou.node(T).relativePathTo(hou.node(S))
        postproc_refcopy(T, srcpath)

]]></script>
  </tool>

  <tool name="DigitalAsset_PostProcess_qL" label="DA: Post-Process" icon="DATATYPES_boolean">
    <script scriptType="python"><![CDATA[import hou
import toolutils
import soptoolutils
import traceback
import re

#hou.ui.displayMessage('(postprocess...)')

'''
    - get selected nodes
        - get asset definition
        - 
'''


def process_node(N):
    '''.'''
    try:
        print "NODE: %s --------" % N.name()
        assert type(N)==hou.SopNode, "not a SOP node"

        # edit asset
        #
        N.allowEditingOfContents()
        T = N.type()
        HDA = T.definition()
        print " -- typename:", HDA.nodeTypeName()
        print " -- description:", HDA.description()

        # process parameter names
        #
        pass

        ptg = HDA.parmTemplateGroup()
        #pts = T.parmTemplates()
        pts = ptg.entries()

        for pt in pts:
            n = pt.name()
            print "--", n

            if n in ['vex_numthreads', 'vex_edit', 'vex_reload']:
                print "---- TO BE REMOVED"
                #HDA.removeParmTuple(pt)
                ptg.remove(pt)
                continue

            if '__vex_' in n:
                n2 = re.sub('__vex_', '', n)
                print "---- %s -> %s" % (n, n2, )
                pt.setName(n2)
                print "----", pt.name()
                pass

        HDA.setParmTemplateGroup(ptg)

        #HDA.updateFromNode(N)

        # done
        #
        print "OKAY.\n"

    except:
        print "OOPS:", traceback.format_exc()



sel = hou.selectedNodes()
for s in sel:
    process_node(s)
]]></script>
  </tool>

  <tool name="sop_facet" label="Facet" icon="SOP_facet">
    <helpURL>operator:Sop/facet</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/facet</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'facet')]]></script>
  </tool>

  <tool name="sop_visibility" label="Visibility" icon="SOP_visibility">
    <helpURL>operator:Sop/visibility</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/visibility</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'visibility')]]></script>
  </tool>

  <tool name="sop_convert" label="Convert" icon="SOP_convert">
    <helpURL>operator:Sop/convert</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/convert</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'convert', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_rails" label="Rails" icon="SOP_rails">
    <helpURL>operator:Sop/rails</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/rails</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'rails')]]></script>
  </tool>

  <tool name="sop_uvquickshade" label="UV Quick Shade" icon="SOP_uvquickshade">
    <helpURL>operator:Sop/uvquickshade</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvquickshade</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'uvquickshade', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_subdivide" label="Subdivide" icon="SOP_subdivide">
    <helpURL>operator:Sop/subdivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/subdivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'subdivide')]]></script>
  </tool>

  <tool name="sop_refine" label="Refine" icon="SOP_refine">
    <helpURL>operator:Sop/refine</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/refine</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'refine', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_dissolve::2.0" label="Dissolve" icon="SOP_dissolve-2.0">
    <helpURL>operator:Sop/dissolve?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/dissolve::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'dissolve::2.0')]]></script>
  </tool>

  <tool name="sop_fuse" label="Fuse" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/fuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'fuse')]]></script>
  </tool>

  <tool name="sop_font" label="Font" icon="SOP_font">
    <helpURL>operator:Sop/font</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.8777500391, -0.370000004768, 0.0, 1.87775015831, 0.362000018358, 0.0)
soptoolutils.genericTool(kwargs, 'font')]]></script>
  </tool>

  <tool name="sop_polyfill" label="PolyFill" icon="SOP_polyfill">
    <helpURL>operator:Sop/polyfill</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyfill</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyfill')]]></script>
  </tool>

  <tool name="sop_ray" label="Ray" icon="SOP_ray">
    <helpURL>operator:Sop/ray</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ray</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'ray')]]></script>
  </tool>

  <tool name="sop_skin" label="Skin" icon="SOP_skin">
    <helpURL>operator:Sop/skin</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/skin</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'skin')]]></script>
  </tool>

  <tool name="sop_fractal" label="Fractal" icon="SOP_fractal">
    <helpURL>operator:Sop/fractal</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/fractal</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.genericTool(kwargs, 'fractal', orient=OrientInfo('dir'))]]></script>
  </tool>

  <tool name="sop_edgecusp" label="Edge Cusp" icon="SOP_edgecusp">
    <helpURL>operator:Sop/edgecusp</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgecusp</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgecusp', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgedivide" label="Edge Divide" icon="SOP_edgedivide">
    <helpURL>operator:Sop/edgedivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgedivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgedivide', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgeflip" label="Edge Flip" icon="SOP_edgeflip">
    <helpURL>operator:Sop/edgeflip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgeflip</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgeflip', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_carve" label="Carve" icon="SOP_carve">
    <helpURL>operator:Sop/carve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/carve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'carve')]]></script>
  </tool>

  <tool name="sop_polyreduce::2.0" label="PolyReduce" icon="SOP_polyreduce-2.0">
    <helpURL>operator:Sop/polyreduce?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyreduce::2.0</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyreduce::2.0')]]></script>
  </tool>

  <tool name="sop_creep" label="Creep" icon="SOP_creep">
    <helpURL>operator:Sop/creep</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/creep</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'creep')]]></script>
  </tool>

  <tool name="sop_sweep" label="Sweep" icon="SOP_sweep">
    <helpURL>operator:Sop/sweep</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sweep</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'sweep')]]></script>
  </tool>

  <tool name="sop_polyexpand2d" label="PolyExpand2D" icon="SOP_polyexpand2d">
    <helpURL>operator:Sop/polyexpand2d</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyexpand2d</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyexpand2d')]]></script>
  </tool>

  <tool name="sop_lsystem" label="L-System" icon="SOP_lsystem">
    <helpURL>operator:Sop/lsystem</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-0.50597846508, -0.545715391636, 0.0, 0.39274096489, 0.392554789782, 0.979372382164)
else:
    kwargs['bbox'] = hou.BoundingBox(-0.50597846508, 0.0, -0.545715391636, 0.39274096489, 0.979372382164, 0.392554789782)
lsystem = soptoolutils.genericTool(kwargs, 'lsystem')

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    parm = lsystem.parm('premise')
    if not lsystem.type().hasPermanentUserDefaults() and not parm.hasTemporaryDefaults():
        parm.set('^(90)' + parm.evalAsString())]]></script>
  </tool>

  <tool name="sop_scatter::2.0" label="Scatter" icon="SOP_scatter-2.0">
    <helpURL>operator:Sop/scatter?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/scatter::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Particle</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'scatter::2.0')]]></script>
  </tool>

  <tool name="sop_reverse" label="Reverse" icon="SOP_reverse">
    <helpURL>operator:Sop/reverse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/reverse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'reverse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgecollapse" label="Edge Collapse" icon="SOP_edgecollapse">
    <helpURL>operator:Sop/edgecollapse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgecollapse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgecollapse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_bulge" label="Bulge" icon="SOP_bulge">
    <helpURL>operator:Sop/bulge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bulge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'bulge')]]></script>
  </tool>

  <tool name="sop_revolve" label="Revolve" icon="SOP_revolve">
    <helpURL>operator:Sop/revolve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/revolve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.genericTool(kwargs, 'revolve', orient=OrientInfo('dir'))]]></script>
  </tool>

  <tool name="sop_uvflatten" label="UV Flatten" icon="SOP_uvflatten">
    <helpURL>operator:Sop/uvflatten</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvflatten</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvflatten')]]></script>
  </tool>

  <tool name="sop_edgeloop" label="Edge Loop" icon="SHELF_edgeloop">
    <helpURL>operator:sop_state/edgeloop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'edgeloop')]]></script>
  </tool>

  <tool name="sop_polysplit::2.0" label="PolySplit" icon="SOP_polysplit">
    <helpURL>operator:Sop/polysplit?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polysplit::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polysplit::2.0')]]></script>
  </tool>

  <tool name="sop_lattice" label="Lattice" icon="SOP_lattice">
    <helpURL>operator:Sop/lattice</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/lattice</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'lattice')]]></script>
  </tool>

  <tool name="sop_polyextrude::2.0" label="PolyExtrude" icon="SOP_polyextrude">
    <helpURL>operator:Sop/polyextrude?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyextrude::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polyextrude::2.0')]]></script>
  </tool>

  <tool name="sop_polybridge" label="PolyBridge" icon="SOP_polybridge">
    <helpURL>operator:Sop/polybridge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polybridge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polybridge')]]></script>
  </tool>

  <tool name="sop_polybevel::2.0" label="PolyBevel" icon="SOP_polybevel">
    <helpURL>operator:Sop/polybevel?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polybevel::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polybevel::2.0')]]></script>
  </tool>

  <tool name="sop_edit" label="Edit" icon="SOP_edit">
    <helpURL>operator:Sop/edit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'edit')]]></script>
  </tool>

  <tool name="sop_sculpt" label="Sculpt" icon="SOP_sculpt">
    <helpURL>operator:Sop/sculpt</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sculpt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'sculpt')]]></script>
  </tool>

  <tool name="sop_uvbrush" label="UV Brush" icon="SOP_uvbrush">
    <helpURL>operator:Sop/uvbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvbrush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvbrush')]]></script>
  </tool>

  <tool name="sop_comb" label="Comb" icon="SOP_comb">
    <helpURL>operator:Sop/comb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/comb</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'comb')]]></script>
  </tool>

  <tool name="object_setmuscleid" label="Set Muscle ID" icon="MISC_rename">
    <helpURL>tool:muscle_setmuscleid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.setMuscleID()]]></script>
  </tool>

  <tool name="object_musclepin" label="Muscle Pin" icon="OBJ_musclepin">
    <helpURL>tool:muscle_musclepin</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createMusclePin(kwargs)]]></script>
  </tool>

  <tool name="object_tissuesimulate" label="Tissue System" icon="SOP_tissuesolver">
    <helpURL>tool:muscle_tissuesimulate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createTissueSim()]]></script>
  </tool>

  <tool name="object_detachmuscles" label="Detach From Bones" icon="SHELF_muscle_detach">
    <helpURL>tool:muscle_detachmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.detachMuscleInputs(None)]]></script>
  </tool>

  <tool name="object_strokemuscle" label="Stroke Muscle" icon="OBJ_muscle">
    <helpURL>tool:muscle_strokemuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createRiggedMuscleByStroke()
]]></script>
  </tool>

  <tool name="object_attachmuscles" label="Attach To Bones" icon="SHELF_muscle_attach">
    <helpURL>tool:muscle_attachmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.attachMuscleInputs(None)]]></script>
  </tool>

  <tool name="object_paintmusclemask" label="Paint Muscle Mask" icon="SHELF_paint_muscle_mask">
    <helpURL>tool:muscle_paintmusclemask</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.paintMuscleMask()]]></script>
  </tool>

  <tool name="object_muscledisplace" label="Muscle Displace" icon="SOP_inflate">
    <helpURL>tool:muscle_displace</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.displaceSkinWithMuscle()]]></script>
  </tool>

  <tool name="object_frankenmuscle" label="Franken Muscle" icon="OBJ_frankenmuscle">
    <helpURL>tool:muscle_frankenmuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createFrankenMuscle(kwargs)
]]></script>
  </tool>

  <tool name="object_musclerig" label="Muscle Rig" icon="OBJ_musclerig">
    <helpURL>tool:muscle_rig</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createMuscleRigByStroke()
]]></script>
  </tool>

  <tool name="object_riggedmuscle" label="Muscle" icon="SHELF_point_to_point_muscle">
    <helpURL>tool:muscle_riggedmuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createRiggedMuscle(kwargs)
]]></script>
  </tool>

  <tool name="object_null" label="Null" icon="OBJ_null">
    <helpURL>operator:Object/null</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/null</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
objecttoolutils.genericTool(kwargs, 'null')]]></script>
  </tool>

  <tool name="object_morph" label="Morph" icon="SOP_blendshapes">
    <helpURL>operator:obj_state/morph</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'morph')]]></script>
  </tool>

  <tool name="object_mirrormusclecapture" label="Mirror Muscle Mask" icon="OBJ_STATE_mirrorcapture">
    <helpURL>operator:obj_state/mirrormusclecapture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'mirrormusclecapture')]]></script>
  </tool>

  <tool name="object_path" label="Path" icon="OBJ_STATE_path">
    <helpURL>operator:Object/path</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/path</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'path')]]></script>
  </tool>

  <tool name="object_capturegeometry" label="Capture Geometry" icon="SOP_capture">
    <helpURL>operator:obj_state/capturegeometry</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'capturegeometry')]]></script>
  </tool>

  <tool name="object_pose" label="Pose" icon="OBJ_STATE_pose">
    <helpURL>operator:obj_state/pose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'pose')]]></script>
  </tool>

  <tool name="object_bonesfromcurve" label="Bones from Curve" icon="OBJ_STATE_bonesfromcurve">
    <helpURL>operator:obj_state/bonesfromcurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'bonesfromcurve')]]></script>
  </tool>

  <tool name="object_bones" label="Bones" icon="OBJ_STATE_bones">
    <helpURL>operator:obj_state/bones</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'bones')]]></script>
  </tool>

  <tool name="object_aligncapturepose" label="Align Capture Pose" icon="OBJ_STATE_aligncapturepose">
    <helpURL>operator:obj_state/aligncapturepose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'aligncapturepose')]]></script>
  </tool>

  <tool name="object_blendpose" label="BlendPose" icon="OBJ_STATE_blendpose">
    <helpURL>operator:obj_state/blendpose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Parenting</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'blendpose')]]></script>
  </tool>

  <tool name="object_parent" label="Parent" icon="SHELF_parent">
    <helpURL>operator:obj_state/parent</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Parenting</toolSubmenu>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'parent')]]></script>
  </tool>

  <tool name="sop_groom_curveadvect" label="Curve Advect" icon="SOP_guideadvect">
    <helpURL>tool:sop_groom_curveadvect</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.curveAdvectTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_whitehair" label="Add White Hairs" icon="FUR_paint_white_density">
    <helpURL>tool:sop_groom_whitehair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.whiteHairTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_hairclump" label="Clump" icon="FUR_paint_clumping">
    <helpURL>tool:sop_groom_hairclump</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.clumpHairTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_frizz" label="Frizz" icon="FUR_paint_frizz">
    <helpURL>tool:sop_groom_guideprocess_frizz</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'frizz')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_smooth" label="Smooth" icon="FUR_smooth">
    <helpURL>tool:sop_groom_guideprocess_smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'smooth')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_straighten" label="Straighten" icon="FUR_paint_straighten">
    <helpURL>tool:sop_groom_guideprocess_straighten</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'straighten')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_bend" label="Bend" icon="FUR_orientation">
    <helpURL>tool:sop_groom_guideprocess_bend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'bend')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_lift" label="Lift" icon="FUR_lift_hair">
    <helpURL>tool:sop_groom_guideprocess_lift</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setlift')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_length" label="Set Length" icon="FUR_paint_length">
    <helpURL>tool:sop_groom_guideprocess_length</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setlength')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_setdir" label="Set Direction" icon="FUR_comb">
    <helpURL>tool:sop_groom_guideprocess_setdir</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setdirvec')]]></script>
  </tool>

  <tool name="sop_groom_guideinit" label="Initialize Guides" icon="FUR_initialize_guides">
    <helpURL>tool:sop_groom_guideinit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideInitTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_isolateparts" label="Isolate Groom Parts" icon="FUR_isolate_parts">
    <helpURL>tool:groom_isolateparts</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.isolateGroomParts(kwargs)]]></script>
  </tool>

  <tool name="object_groom_togglehairdisplay" label="Toggle Display" icon="FUR_toggle_display">
    <helpURL>tool:groom_togglehairdisplay</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.toggleHairDisplayTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_recachestrokes" label="Recache Strokes" icon="FUR_recache_strokes">
    <helpURL>tool:groom_recachestrokes</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.recacheStrokesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_hairgen" label="Generate Hair" icon="FUR_hairgen">
    <helpURL>tool:groom_hairgen</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.hairGenTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_simguides" label="Simulate Guides" icon="FUR_add_dynamics">
    <helpURL>tool:groom_simguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.simGuidesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_animateguides" label="Deform Guides" icon="FUR_animate">
    <helpURL>tool:groom_animateguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.animateGuidesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_groommerge" label="Merge Groom Objects" icon="FUR_groommerge">
    <helpURL>tool:groom_groommerge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.groomMergeTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_guidegroom" label="Create Guides" icon="FUR_guidegroom">
    <helpURL>tool:groom_guidegroom</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideGroomTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_addfur" label="Add Fur" icon="FUR_add_fur">
    <helpURL>tool:groom_addfur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.addFurTool(kwargs)]]></script>
  </tool>

  <tool name="object_groomextendhair" label="Extend Hair" icon="FUR_length">
    <helpURL>tool:extendhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="extend")]]></script>
  </tool>

  <tool name="object_groomcuthair" label="Cut Hair" icon="FUR_cut_hair">
    <helpURL>tool:cuthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="cut")]]></script>
  </tool>

  <tool name="object_groomsmooth" label="Smooth Hair" icon="FUR_smooth">
    <helpURL>tool:smoothhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="smooth")]]></script>
  </tool>

  <tool name="object_groomadjustlength" label="Length Adjust" icon="FUR_adjust_length">
    <helpURL>tool:lengthadjust</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="adjustlength")]]></script>
  </tool>

  <tool name="object_groompartbrush" label="Part Hair" icon="FUR_part_hair">
    <helpURL>tool:parthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="part")]]></script>
  </tool>

  <tool name="object_groomclumpbrush" label="Clump Hair" icon="FUR_clump_hair">
    <helpURL>tool:clumphair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="clump")]]></script>
  </tool>

  <tool name="object_groomliftbrush" label="Lift Hair" icon="FUR_lift_hair">
    <helpURL>tool:lifthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="lift")]]></script>
  </tool>

  <tool name="object_groomhairalongsurface" label="Surface Brush" icon="FUR_surface_brush">
    <helpURL>tool:surfacebrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="groomsurface")]]></script>
  </tool>

  <tool name="object_groomhairinscreen" label="Screen Brush" icon="FUR_screen_brush">
    <helpURL>tool:screenbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="groomscreen")]]></script>
  </tool>

  <tool name="sop_groom_drawpartingline" label="Part" icon="FUR_addparting">
    <helpURL>tool:drawpartingline</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.drawPartingLineTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_reguide" label="Reguide" icon="FUR_reguide">
    <helpURL>tool:reguide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.reguideTool(kwargs)]]></script>
  </tool>

  <tool name="object_plantguides" label="Plant Guides" icon="FUR_plant_guides">
    <helpURL>tool:plantguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.createFurAndStartGrooming(kwargs, tool="plantguides")]]></script>
  </tool>

  <tool name="object_drawhairguides" label="Draw Hair" icon="SOP_drawhair">
    <helpURL>tool:drawhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startDrawing(kwargs)]]></script>
  </tool>

  <tool name="rigging_ikfrombones" label="IK from Bones" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfrombones</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import boneiktwisttool
boneiktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="rigging_ikfromobjects" label="IK from Objects" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfromobjects</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import iktwisttool
iktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="object_bakeanimation" label="Bake Animation" icon="ROP_bakeanimation">
    <helpURL>operator:Driver/bakeanimation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.bakeanimationStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintbake" label="Bake Constraint" icon="SHELF_constraint_bake">
    <helpURL>tool:bakeconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintbakeStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttoggle" label="Toggle Constraint" icon="SHELF_constraint_toggle">
    <helpURL>tool:constrainttoggle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constrainttoggleStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintdelete" label="Delete Constraint" icon="SOP_delete">
    <helpURL>tool:constraintdelete</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintdeleteStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttransform" label="Transform Constraint" icon="CHOP_constrainttransform">
    <helpURL>tool:transformconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constrainttransformStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintgamepad" label="Gamepad" icon="CHOP_gamepad">
    <helpURL>tool:constraintgamepad</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintgamepadStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpoints" label="Points" icon="OBJ_rivet">
    <helpURL>tool:constraintpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintpointsStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintsurface" label="Surface" icon="OBJ_sticky">
    <helpURL>tool:constraintsurface</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintsurfaceStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpath" label="Follow Path" icon="SHELF_followpath">
    <helpURL>tool:constraintpath</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintpathStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintlookat" label="Look At" icon="SHELF_lookat">
    <helpURL>tool:constraintlookat</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintlookatStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintblend" label="Blend" icon="OBJ_blend">
    <helpURL>tool:constraintblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintparentblend" label="Parent Blend" icon="SHELF_parent">
    <helpURL>tool:constraintparentblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintparentblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_editcaptureregion" label="Edit Capture Regions" icon="OBJ_STATE_editcaptureregion">
    <helpURL>tool:editcaptureregions</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureregion')]]></script>
  </tool>

  <tool name="object_mirrorcapture" label="Mirror Capture Weights" icon="OBJ_STATE_mirrorcapture">
    <helpURL>tool:mirrorcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'mirrorcapture')]]></script>
  </tool>

  <tool name="object_editcaptureweight" label="Edit Capture Weights" icon="OBJ_STATE_editcaptureweight">
    <helpURL>tool:editcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureweight')]]></script>
  </tool>

  <tool name="object_editcaptureblend" label="Edit Capture Blends" icon="OBJ_STATE_editcaptureblend">
    <helpURL>tool:editcaptureblends</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureblend')]]></script>
  </tool>

  <tool name="geometry_convertvdb" label="Convert VDB" icon="SOP_convertvdb">
    <helpURL>operator:Sop/convertvdb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[

import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "convert"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfromparticles" label="SDF Particles" icon="SOP_vdbfromparticles">
    <helpURL>operator:Sop/vdbfromparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "fromparticles"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfrompolygons" label="SDF Polys" icon="SOP_vdbfrompolygons">
    <helpURL>operator:Sop/vdbfrompolygons</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "frompolygons"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizecurve" label="Fog Curve" icon="SOP_volumerasterizecurve">
    <helpURL>operator:Sop/volumerasterizecurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizeparticles" label="Fog Particles" icon="SOP_volumerasterizeparticles">
    <helpURL>operator:Sop/volumerasterizeparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "particles"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizepoints" label="Fog Points" icon="SOP_volumerasterizepoints">
    <helpURL>operator:Sop/volumerasterizepoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "points"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_spraypaint" label="Spray Paint" icon="SOP_spraypaint">
    <helpURL>tool:spraypaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "spraypaint"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_drawcurve" label="Draw Curve" icon="SOP_drawcurve">
    <helpURL>tool:drawcurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintsdfvolume" label="Paint SDF Volume" icon="SOP_paintsdfvolume">
    <helpURL>operator:Sop/paintsdfvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "sdf"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintfogvolume" label="Paint Fog Volume" icon="SOP_paintfogvolume">
    <helpURL>operator:Sop/paintfogvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "fog"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="object_jiggleobject" label="Jiggle" icon="CHOP_jiggle">
    <helpURL>tool:jiggleobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addJiggle(input_chop, source_name):
    chop = input_chop.parent().createNode("jiggle", source_name + "_jiggle1")
    chop.setInput(0, input_chop)
    chop.moveToGoodPosition()
    return chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to jiggle and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, jiggle_chop, output_chop) = choptoolutils.modifyObjectTool(
    'jiggle', source, target, addJiggle)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(jiggle_chop, output_chop)]]></script>
  </tool>

  <tool name="geometry_paintcolorvolume" label="Paint Color Volume" icon="SOP_paintcolorvolume">
    <helpURL>operator:Sop/paintcolorvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "color"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="object_lagobject" label="Lag" icon="CHOP_lag">
    <helpURL>tool:lagobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addLag(input_chop, source_name):
    lag_chop = input_chop.parent().createNode("lag", source_name + "_lag1")
    lag_chop.setInput(0, input_chop)
    lag_chop.moveToGoodPosition()
    lag_chop.parm("scope").set("t[xyz]")
    return lag_chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to lag and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, lag_chop, output_chop) = choptoolutils.modifyObjectTool(
    'lag', source, target, addLag)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(lag_chop, output_chop)]]></script>
  </tool>

  <tool name="geometry_file" label="File" icon="SOP_file">
    <helpURL>operator:Sop/file</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <toolSubmenu>Export</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.chooseAndOpenGeoFile(kwargs, True)]]></script>
  </tool>

  <tool name="sop_uvedit" label="UV Edit" icon="SOP_uvedit">
    <helpURL>operator:Sop/uvedit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvedit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvedit', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvtransform" label="UV Transform" icon="SOP_uvtransform">
    <helpURL>operator:Sop/uvtransform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvtransform</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvtransform', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvunwrap" label="UV Unwrap" icon="SOP_uvunwrap">
    <helpURL>operator:Sop/uvunwrap</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvunwrap</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvunwrap', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvpelt::2.0" label="UV Pelt" icon="SOP_uvpelt">
    <helpURL>operator:Sop/uvpelt?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvpelt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvpelt::2.0', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_texture" label="UV Texture" icon="SOP_texture">
    <helpURL>operator:Sop/texture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/texture</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'texture', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvfuse" label="UV Fuse" icon="SOP_uvfuse">
    <helpURL>operator:Sop/uvfuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvfuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvfuse', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvproject" label="UV Project" icon="SOP_uvproject">
    <helpURL>operator:Sop/uvproject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvproject</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvproject', 'uvattrib')
# compute the geometry bounding box and use it for the projection plane
sop.parm('initbbox').pressButton()
]]></script>
  </tool>

  <tool name="generic_cleartexcache" label="Clear Texture Cache" icon="SHELF_clear_texture_cache">
    <helpURL>tool:cleartexcache</helpURL>
    <script scriptType="hscript"><![CDATA[texcache -c]]></script>
  </tool>

  <tool name="generic_hide" label="Hide" icon="SHELF_hide">
    <helpURL>tool:hide</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

active_pane = toolutils.activePane(kwargs)
prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
selected_objects = list(active_pane.selectObjects(prompt))
for object in selected_objects:
    object.setDisplayFlag( False )
toolutils.genericStateTool(kwargs, 'objview')]]></script>
  </tool>

  <tool name="generic_delete" label="Delete" icon="SOP_delete">
    <helpURL>tool:delete</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
import doptoolutils
import poptoolutils


# find out curr context
active_pane = toolutils.activePane(kwargs)
if active_pane is not None and \
    active_pane.type() == hou.paneTabType.ContextViewer:
    active_pane = active_pane.sceneViewer()

if active_pane is None or active_pane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("The tool was not invoked in the scene viewer.")

# we determine what selection type we should consider (ie, OBJ, SOP,
#  DOP, POP) based on the viewer network path and the child type
scene_viewer = active_pane
child_type   = scene_viewer.pwd().childTypeCategory()

if child_type == hou.objNodeTypeCategory():
    # object context: delete the object nodes
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
    selected_objects = list(scene_viewer.selectObjects(prompt))
    for object in selected_objects:
        object.destroy()
    scene_viewer.setCurrentState('select')

elif child_type == hou.sopNodeTypeCategory():
    # geometry context: delete the component (points, edges, primitives)
    prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
    # we cannot consume the selection here as the tool we launch will
    # need to use it, i.e., we act as a preliminary select state here.
    selection = scene_viewer.selectGeometry(prompt=prompt,
					    consume_selections=False)
    type = selection.geometryType()
    if type == hou.geometryType.Primitives \
	     or type == hou.geometryType.Points \
	     or not selection.primitiveTypes():
        node = soptoolutils.genericTool(kwargs, 'blast')
	node.parm('removegrp').set(True)
    else:
        soptoolutils.genericTool(kwargs, 'dissolve::2.0')
elif child_type == hou.dopNodeTypeCategory():
    # dynamics context: remove object or modifier from simulation
    # obtain the selection and separate objects from modifiers
    prompt = toolutils.selectionPrompt(hou.dopNodeTypeCategory())
    selected_dops = list(scene_viewer.selectDynamics(prompt, 0, True, True))
    dop_objects = []
    dop_modifiers = []
    for dop in selected_dops:
        if isinstance(dop, hou.DopObject):
            dop_objects.append( dop )
        elif isinstance(dop, hou.DopData):
            dop_modifiers.append( dop )
    # call functions that remove the dop data and modifiers from simulation
    if len(dop_objects) > 0:
        doptoolutils.dopObjectsRemoveFromSimulation(dop_objects)
    if len(dop_modifiers) > 0:
        doptoolutils.dopModifiersRemoveFromSimulation(dop_modifiers)

elif child_type == hou.popNodeTypeCategory():
    # particle context: remove pop nodes or modifires
    prompt = toolutils.selectionPrompt(hou.popNodeTypeCategory())
    selected_pops = list(scene_viewer.selectParticles(prompt))
    for pop in selected_pops:
        pop.destroy()

]]></script>
  </tool>

  <tool name="geometry_tube" label="Tube" icon="SOP_tube">
    <helpURL>tool:tube</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
rad = 0.5
height = 1.0
kwargs['bbox'] = hou.BoundingBox(-rad, -height/2., -rad, rad, height/2., rad)
tube = soptoolutils.genericTool(kwargs, 'tube')
tube.parm("type").set("poly")
tube.parm("radscale").set(rad)
tube.parm("height").set(height)
]]></script>
  </tool>

  <tool name="geometry_sphere" label="Sphere" icon="SOP_sphere">
    <helpURL>tool:sphere</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
rad = 0.5
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
sphere = soptoolutils.genericTool(kwargs, 'sphere')
sphere.parm("type").set("polymesh")
sphere.parm("radx").set(rad)
sphere.parm("rady").set(rad)
sphere.parm("radz").set(rad)
]]></script>
  </tool>

  <tool name="geometry_duplicate" label="Duplicate" icon="SOP_duplicate">
    <helpURL>tool:duplicate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objcopy')
else:
    node = soptoolutils.genericTool(kwargs, 'copyxform')
    try:
	inputnode = node.inputs()[0]
	ingeo = inputnode.geometry()
	groupstr = node.parm('sourcegroup').evalAsString()
	bbox = ingeo.primBoundingBox(groupstr)
	node.parmTuple('p').set(bbox.center())
    except:
	pass
    ]]></script>
  </tool>

  <tool name="geometry_copy" label="Copy to Points" icon="SOP_copy">
    <helpURL>tool:copytopoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'copytopoints')]]></script>
  </tool>

  <tool name="sop_break" label="Break" icon="SOP_break">
    <helpURL>operator:Sop/break</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.scriptSopFilterTool(kwargs, 'break', center_on_selection=True, orient=OrientInfo('r'))]]></script>
  </tool>

  <tool name="cloud_light" label="Cloud Light" icon="SOP_cloudlight">
    <helpURL>operator:Sop/cloudlight</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudLight(kwargs)
]]></script>
  </tool>

  <tool name="cloud_create" label="Cloud Rig" icon="SHELF_cloudrig">
    <helpURL>tool:cloudrig</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudSource(kwargs)
]]></script>
  </tool>

  <tool name="terrain_dunes" label="Terrain: Dunes" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_dunes</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxDunes(kwargs)
]]></script>
  </tool>

  <tool name="terrain_canyon" label="Terrain: Canyon" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_canyon</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxCanyon(kwargs)
]]></script>
  </tool>

  <tool name="terrain_islands" label="Terrain: Islands" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_islands</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxIslands(kwargs)
]]></script>
  </tool>

  <tool name="terrain_moonscape" label="Terrain: Moonscape" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_moonscape</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMoonscape(kwargs)
]]></script>
  </tool>

  <tool name="terrain_valley" label="Terrain: Valley" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_valley</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxValley(kwargs)
]]></script>
  </tool>

  <tool name="terrain_mountain" label="Terrain: Mountain" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_mountain</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMountain(kwargs)
]]></script>
  </tool>

  <tool name="terrain_hills" label="Terrain: Hills" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_hills</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxRockyLowLands(kwargs)
]]></script>
  </tool>

  <tool name="sky_rig" label="Sky Rig" icon="SOP_sky">
    <helpURL>operator:Sop/sky</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import skytoolutils
skytoolutils.skySource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_waves" label="Waves" icon="SHELF_oceanwaves">
    <helpURL>tool:waves</helpURL>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

evalnode = soptoolutils.genericTool(kwargs, 'oceanevaluate')
spectrumnode = evalnode.parent().createNode('oceanspectrum')
spectrumnode.parm('windspeed').set(10)
evalnode.setNextInput(spectrumnode)
spectrumnode.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="object_paintcapturelayer" label="Paint Capture Layer" icon="OBJ_STATE_paintcapturelayer">
    <helpURL>operator:Sop/capturelayerpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'capturelayerpaint')]]></script>
  </tool>

  <tool name="sop_deltamush" label="Delta Mush" icon="SOP_deltamush">
    <helpURL>operator:Sop/deltamush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/deltamush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

deltamush = soptoolutils.genericTool(kwargs, 'deltamush')
if isinstance(toolutils.activePane(kwargs), hou.SceneViewer):
    deform = soptoolutils.findDeformTypeInputSop(deltamush)
    if deform is not None and len(deform.inputs()) > 0:
	deltamush.setInput(1, deform.inputs()[0])
]]></script>
  </tool>

  <tool name="sop_topobuild" label="TopoBuild" icon="SOP_topobuild">
    <helpURL>operator:Sop/topobuild</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    sopnode, template = None, None
    node = activepane.currentNode()
    if node and node.type().category() == hou.sopNodeTypeCategory():
        # continue work in the current SOP network
        sopnode = node
        topobuild = toolutils.findInputNodeOfType(sopnode, 'topobuild', True)
        if topobuild:
            inputs = topobuild.inputs()
            if len(inputs) > 1:
                # re-use the template geometry
                template = inputs[1]

    if template is None:
        # select template geometry
        for obj in activepane.selectObjects(
                    prompt = 'Select geometry object to resurface and press Enter.',
                    allowed_types = ('geo', ),
                    allow_multisel = False):
            # create a new container if the selected object is an ancestor of
            # sopnode
            node = sopnode
            while node:
                if node == obj:
                    sopnode = None
                    break
                node = node.parent()
            if sopnode:
	        container = sopnode.parent()
	    else:
                # create container for retopo work
                container = obj.parent().createNode('geo', obj.name() + '_retopo')
                toolutils.removeDefaultGeometryObjectContents(container)
                container.moveToGoodPosition()

            # object merge template geometry
            template = container.createNode('object_merge')
            template.parm('objpath1').set(template.relativePathTo(obj))
            template.parm('xformpath').set('.')
            template.moveToGoodPosition()

    if template:
        template.setTemplateFlag(True)
        if sopnode is None or sopnode.type().name() != 'topobuild':
            # create new topobuild node
            topobuild = template.parent().createNode('topobuild')
            topobuild.setInput(0, sopnode)
            topobuild.setInput(1, template)
            topobuild.moveToGoodPosition()
            topobuild.setDisplayFlag(True)
            topobuild.setRenderFlag(sopnode is None or sopnode.isRenderFlagSet())

            # add visualizer
            vis = hou.viewportVisualizers.createVisualizer(hou.viewportVisualizers.type('vis_color'), hou.viewportVisualizerCategory.Node, topobuild)
            vis.setParm('colortype', 'constant')
            vis.setParm('class', 'detail')
            vis.setParm('constcolorr', 0.0)
            vis.setParm('constcolorg', 0.9)
            vis.setParm('constcolorb', 0.21)
            vis.setIsActive(True)
            sopnode = topobuild
        sopnode.setCurrent(True, True)
        activepane.enterCurrentNodeState()
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, 'topobuild')
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="sop_uvsmooth" label="UV Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the UV primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedpoints',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, ),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
sopnodes = soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'uvsmooth1', selection_queries)
for node in sopnodes:
  node.parm('attributes').set(soptoolutils.findViewersUV(kwargs))]]></script>
  </tool>

  <tool name="sop_smooth::2.0" label="Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedvertices',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, hou.geometryType.Edges),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'smooth1', selection_queries)]]></script>
  </tool>

  <tool name="sop_curve" label="Curve" icon="SOP_curve">
    <helpURL>operator:Sop/curve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Get the current context.
    sceneviewer = toolutils.sceneViewer()
    # Create a SOP container.
    container = soptoolutils.createSopNodeContainer(sceneviewer, "curve_object1")
    # Create the curve.
    newnode = soptoolutils.createSopNodeGenerator(container, "curve", None)
    # Turn on the highlight flag so we see the SOPs selected output.
    newnode.setHighlightFlag(True)
    if sceneviewer.isCreateInContext():
        newnode.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
        toolutils.homeToSelectionNetworkEditorsFor(newnode)
    else:
        container.setCurrent(True, True)
        toolutils.homeToSelectionNetworkEditorsFor(container)
        activepane.setPwd(container.parent())
        activepane.setCurrentState("objcurve")
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "curve")
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="object_combine" label="Combine" icon="SHELF_combine_objects">
    <helpURL>tool:combine</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = toolutils.sceneViewer()

# Ask for the objects to combine
selected_objects = list(scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = True,
    allowed_types = ("geo",)))
# The following will raise an exception if nothing was selected.
if len(selected_objects) == 0:
    raise hou.Error("Nothing was selected.")

# Combine into the last picked item
current_objects = [obj for obj in selected_objects if obj.isCurrent()]
if len(current_objects) == 0:
    container = selected_objects[-1]
else:
    container = current_objects[-1]

selected_objects.remove(container)
container.combine(selected_objects)
toolutils.homeToSelectionNetworkEditorsFor(container)
]]></script>
  </tool>

  <tool name="geo_group" label="Group" icon="SOP_group">
    <helpURL>operator:Sop/groupcreate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'groupcreate')]]></script>
  </tool>

  <tool name="geometry_extract" label="Extract" icon="SHELF_extract_object">
    <helpURL>tool:extract</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives to extract and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")

# Create a new SOP container with the merged geometry
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
merge_sop = selection.mergedNode(container, nodetypename, True, True)
# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)

# Change our viewer to the new object
scene_viewer.setPwd(merge_sop.parent())
merge_sop.setDisplayFlag(True)
merge_sop.setRenderFlag(True)
merge_sop.setHighlightFlag(True)
merge_sop.setCurrent(True, True)
merge_sop.moveToGoodPosition()
toolutils.homeToSelectionNetworkEditorsFor(merge_sop)
scene_viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="object_movetopivot" label="Move Center to Pivot" icon="SHELF_move_center_to_pivot">
    <helpURL>tool:movetopivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
	sop = center_obj.createNode('xform', 'move_to_pivot1')
	sop.setInput(0, display)
	sop.moveToGoodPosition()
	sop.setDisplayFlag(True)
	if display.isRenderFlagSet():
	    sop.setRenderFlag(True)
	sop.parmTuple("t").set(-pivot)
	sop.parmTuple("p").set( pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("objxform")]]></script>
  </tool>

  <tool name="object_centerpivot" label="Move Pivot to Center" icon="SHELF_center_pivot">
    <helpURL>tool:centerpivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display is None:
        pivot = hou.Vector3(0, 0, 0)        # Use 0,0,0 by convention
    else:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
    center_obj.parmTuple("p").set(pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("objxform")]]></script>
  </tool>

  <tool name="sop_clip" label="Clip" icon="SOP_clip">
    <helpURL>operator:Sop/clip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

clip_sop = soptoolutils.genericTool(kwargs, 'clip', orient = OrientInfo('dir'))
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer) and \
	clip_sop is not None and len(clip_sop.inputs()) > 0:
    input = clip_sop.inputs()[0]
    input_center = input.geometry().boundingBox().center()
    clip_sop.parmTuple('origin').set(input_center)]]></script>
  </tool>

  <tool name="sop_knife" label="Knife" icon="SHELF_knife">
    <helpURL>operator:Sop/knife</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/knife</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

knife_sop = soptoolutils.genericTool(kwargs, 'knife', 'knife1', custom = False,
                                     orient = OrientInfo('dir'))
knife_sop.parm("knifeop").set("both")
knife_sop.setCreatorState('knife')
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    sceneviewer = toolutils.sceneViewer()
    sceneviewer.setCurrentState("knife")
]]></script>
  </tool>

  <tool name="sop_metaball" label="Metaball" icon="SOP_metaball">
    <helpURL>operator:Sop/metaball</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/metaball</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
soptoolutils.genericTool(kwargs, 'metaball', merge_context=True)]]></script>
  </tool>

  <tool name="geometry_loft" label="Loft" icon="SOP_loft">
    <helpURL>tool:loft</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

u_selector_only = [0]
node = soptoolutils.genericSopNodeFilterTool(kwargs, 'skin', 'loft1', False, False, True, u_selector_only)]]></script>
  </tool>

  <tool name="sop_twist" label="Twist" icon="SHELF_twist_twist">
    <helpURL>tool:twist</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import soptoolutils
import toolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "twist")
else:
    node = soptoolutils.genericTool(kwargs, 'bend', 'twist1')
    soptoolutils.setupBendRegions(kwargs, node)
    node.parm("twist").set(0)
]]></script>
  </tool>

  <tool name="sop_bend" label="Bend" icon="SHELF_twist_bend">
    <helpURL>tool:bend</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import soptoolutils
import toolutils

activepane = toolutils.activePane(kwargs)

if activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "bend")
else:
    node = soptoolutils.genericTool(kwargs, 'bend', 'bend1')
    soptoolutils.setupBendRegions(kwargs, node)
    node.parm("bend").set(0)
]]></script>
  </tool>

  <tool name="geometry_lineartaper" label="Linear Taper" icon="SHELF_twist_linear_taper">
    <helpURL>tool:lineartaper</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

node = soptoolutils.genericTool(kwargs, 'bend', 'lineartaper1')
soptoolutils.setupBendRegions(kwargs, node)
node.parm("taper").set(1)
]]></script>
  </tool>

  <tool name="geometry_squashstretch" label="Squash and Stretch" icon="SHELF_twist_squashstretch">
    <helpURL>tool:squashstretch</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'twist', 'squashstretch1')
node.parm("op").set("squash")]]></script>
  </tool>

  <tool name="geometry_voronoifracture" label="Shatter" icon="SOP_shatter">
    <helpURL>tool:shatter</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

# Create our voronoi fracture

fracture = soptoolutils.genericTool(kwargs, 'voronoifracture')

fognode = fracture.parent().createNode('isooffset', 'converttofog1')
fognode.parm("output").set('fogvolume')
fognode.parm("samplediv").set(30)

fognode.setNextInput(fracture.inputs()[0])

fognode.moveToGoodPosition()

scatternode = fracture.parent().createNode('scatter', 'chunkcenters')
scatternode.parm("forcetotal").set(True)
scatternode.parm("npts").set(10)
scatternode.parm("relaxpoints").set(False)
scatternode.setNextInput(fognode)
scatternode.moveToGoodPosition()

fracture.setNextInput(scatternode)
fracture.moveToGoodPosition()

]]></script>
  </tool>

  <tool name="geometry_fogvolume" label="Volume" icon="SOP_volume">
    <helpURL>operator:Sop/isooffset</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'isooffset', 'converttofog1')
node.parm("output").set('fogvolume')
node.parm("samplediv").set(30)
]]></script>
  </tool>

  <tool name="sop_boolean::2.0" label="Boolean" icon="SOP_boolean">
    <helpURL>operator:Sop/boolean</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.addBooleanTool(kwargs)
]]></script>
  </tool>

  <tool name="geometry_mirror" label="Mirror" icon="SOP_mirror">
    <helpURL>tool:mirror</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objmirror')
else:
    soptoolutils.genericTool(kwargs, 'mirror')]]></script>
  </tool>

  <tool name="geometry_box" label="Box" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
sphere.parm("type").set("polymesh")
sphere.parm("divrate1").set(2)
sphere.parm("divrate2").set(2)
sphere.parm("divrate3").set(2)
]]></script>
  </tool>

  <tool name="geometry_circle" label="Circle" icon="SOP_circle">
    <helpURL>tool:circle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'circle')
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_line" label="Line" icon="SOP_line">
    <helpURL>tool:line</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'line')
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_platonic" label="Platonic Solids" icon="SOP_platonic">
    <helpURL>tool:platonic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

rad = 0.5
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
platonic = soptoolutils.genericTool(kwargs, 'platonic')
platonic.parm("radius").set(rad)
]]></script>
  </tool>

  <tool name="geometry_grid" label="Grid" icon="SOP_grid">
    <helpURL>tool:grid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

size = 4.0
kwargs['bbox'] = hou.BoundingBox(-size/2.0, 0, -size/2.0, size/2.0, 0, size/2.0)
grid = soptoolutils.genericTool(kwargs, 'grid')
grid.parm("sizex").set(size)
grid.parm("sizey").set(size)
]]></script>
  </tool>

  <tool name="geometry_torus" label="Torus" icon="SOP_torus">
    <helpURL>tool:torus</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
orad = 0.5
irad = 0.25
kwargs['bbox'] = hou.BoundingBox(-orad - irad, -irad, -orad - irad, orad + irad, irad, orad + irad)
torus = soptoolutils.genericTool(kwargs, 'torus')
torus.parm("type").set("poly")
torus.parm("radx").set(orad)
torus.parm("rady").set(irad)
]]></script>
  </tool>

  <tool name="sop_ripple::2.0" label="Ripple" icon="SOP_ripple">
    <helpURL>operator:Sop/ripple</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ripple</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

ripple = soptoolutils.genericTool(kwargs, 'ripple', orient=OrientInfo('up'))
ripple.parm('usecenter').set(True)
]]></script>
  </tool>

  <tool name="object_freeze" label="Freeze" icon="SHELF_freezetransforms">
    <helpURL>tool:freeze</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils


# Determine context
active_pane = toolutils.activePane(kwargs)
scene_viewer = toolutils.sceneViewer()
pwd = scene_viewer.pwd()

# Prompt selection
selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))
if len(selected) == 0:
    raise hou.Error("Nothing was selected")
objecttoolutils.freeze(selected)]]></script>
  </tool>

  <tool name="object_mocapbiped3" label="Mocap Biped 3" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped3</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped3', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped2" label="Mocap Biped 2" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped2</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped2', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped1" label="Mocap Biped 1" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped1</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped1', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplefemale" label="Simple Female" icon="OBJ_simplefemale">
    <helpURL>operator:Object/simplefemale</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplefemale', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplemale" label="Simple Male" icon="OBJ_simplemale">
    <helpURL>operator:Object/simplemale</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplemale', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplebiped" label="Simple Biped" icon="OBJ_simplebiped">
    <helpURL>operator:Object/simplebiped</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplebiped', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="sop_constraintnetwork" label="Constraints Network" icon="NETWORKS_chop">
    <helpURL>tool:sop_constraintnetwork</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[#import soptoolutils
#soptoolutils.genericTool(kwargs, 'constraintnetwork')
import objecttoolutils
objecttoolutils.constraintnetworkStateToolApply(kwargs)]]></script>
  </tool>

  <tool name="sop_cloud" label="Cloud" icon="SOP_cloud">
    <helpURL>operator:Sop/cloud</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloud</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloud')]]></script>
  </tool>

  <tool name="sop_cloudnoise" label="Cloud Noise" icon="SOP_cloudnoise">
    <helpURL>operator:Sop/cloudnoise</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloudnoise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloudnoise')]]></script>
  </tool>

  <tool name="sop_mountain::2.0" label="Mountain" icon="SOP_mountain">
    <helpURL>operator:Sop/mountain</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/mountain::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'mountain::2.0')]]></script>
  </tool>

  <tool name="sop_clusterpoints" label="Cluster Points" icon="SOP_clusterpoints">
    <helpURL>operator:Sop/clusterpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/clusterpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'clusterpoints')]]></script>
  </tool>

  <tool name="object_mcacclaim" label="Mocap Acclaim" icon="OBJ_mcacclaim">
    <helpURL>operator:Object/mcacclaim</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/mcacclaim</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.genericTool(kwargs, 'mcacclaim')]]></script>
  </tool>

  <tool name="tool_1" label="rename sequence" icon="SOP_python">
    <script scriptType="python"><![CDATA[import pcsutils
reload(pcsutils)
pcsutils.renameSequence()]]></script>
  </tool>

  <tool name="tool_2" label="move sequence" icon="SOP_python">
    <script scriptType="python"><![CDATA[# coding:utf-8
import pcsutils
reload(pcsutils)
pcsutils.removeSequence()]]></script>
  </tool>

  <tool name="cam_track" label="cam track" icon="SOP_python">
    <script scriptType="python"><![CDATA[import pcsutils
reload(pcsutils)
pcsutils.abcCamTrack()]]></script>
  </tool>

  <tool name="tool_3" label="regex remove" icon="SOP_python">
    <script scriptType="python"><![CDATA[import pcsutils
reload(pcsutils)
pcsutils.removeFile()]]></script>
  </tool>

  <tool name="copy" label="copy" icon="SOP_python">
    <script scriptType="python"><![CDATA[import my_copy
reload(my_copy)
my_copy.setup()]]></script>
  </tool>

  <tool name="vc" label="viewport comment" icon="SOP_python">
    <script scriptType="python"><![CDATA[import pcsutils
reload(pcsutils)
pcsutils.viewportComment()]]></script>
  </tool>

  <tool name="validate_cache" label="validate cache" icon="SOP_python">
    <script scriptType="python"><![CDATA[# åä¸ä¸ªå¯ä»¥æ¥æ¾å½åhoudinièç¹ä½¿ç¨çç¼å­è·¯å¾,å³æ¸çç¼å­
# æå¥½æ¯æä¸ªui,æ åºåªæ®µç¼å­æ¯æ æç¼å­,ç±ç¨æ·æ¥å³å®åªä¸ä¸ªè¦å é¤
# å¯ä»¥æ´åå°hqTool,æ¥æ¾æªä½¿ç¨,å¹¶åæ¸ç
# è¾åºlogï¼
#    åºåææç¼å­åæ æç¼å­
#    è¯¢é®æ¯ä¸æ¯éè¦æä¸ä½¿ç¨çæä»¶æ¾å°temp diréé¢ï¼è¾åºlogï¼å¤§å°ï¼å¸§æ°
#    ææç¼å­æ åºæ¯åªä¸ªèç¹å¨ä½¿ç¨ + ç»å¯¹è·¯å¾ + åºåç¼å­å¤§å° + åºåå¸§æ°

import pcsutils
reload(pcsutils)
pcsutils.validateCache()]]></script>
  </tool>

  <tool name="H17_cam" label="fix_h17_cam" icon="SOP_python">
    <script scriptType="python"><![CDATA[import sys
sys.path.append(r"\\server1\D\CHENZHONGYU\pcs-utils-release")
import pcsutils
reload(pcsutils)
pcsutils.fix_H17_abc_cam()]]></script>
  </tool>

  <tool name="iso_selected" label="iso_selected" icon="SOP_python">
    <script scriptType="python"><![CDATA[import pcsutils
reload(pcsutils)
pcsutils.isolateSelection()]]></script>
  </tool>

  <tool name="constraint_tool" label="constraint_tool" icon="SOP_python">
    <script scriptType="python"><![CDATA[import sys
sys.path.append(r"\\sdychenzhongyu\D\pcs-utils\scripts\Python\PySide2\constraint_tool")
import constraint_tool
reload(constraint_tool)
import PySide2.QtCore as qc

tool_dialog = constraint_tool.ToolDialog()
tool_dialog.setParent(hou.qt.mainWindow(), qc.Qt.Window)
tool_dialog.show()]]></script>
  </tool>

  <tool name="maya_light" label="maya_light" icon="SOP_python">
    <script scriptType="python"><![CDATA[import sys
sys.path.append(r"\\sdychenzhongyu\d\pcs-utils\scripts\Python\PySide2\MH_LightRebuild\Houdini_LightRebuild")
import Houdini_LightRebuild
reload(Houdini_LightRebuild)
import PySide2.QtCore as qc


tool_dialog = Houdini_LightRebuild.Houdini_LightRebuild()
tool_dialog.setParent(hou.qt.mainWindow(), qc.Qt.Window)
tool_dialog.show()]]></script>
  </tool>

  <tool name="rbd_constraint" label="rbd_constraint" icon="SOP_python">
    <script scriptType="python"><![CDATA[import sys
sys.path.append(r"D:\XZ\pcs-library\pcs-utils\scripts\Python\PySide2\constraint_tool")

import constraint_tool
import PySide2.QtCore as qc
tool_dialog = constraint_tool.ToolDialog()
tool_dialog.setParent(hou.qt.mainWindow(), qc.Qt.Window)
tool_dialog.show()]]></script>
  </tool>
</shelfDocument>
